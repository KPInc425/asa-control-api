---
description: 
globs: 
alwaysApply: false
---
Ask AI
---description: Backend API development for ARK: Survival Ascended control system
globs:
  - "server.js"
  - "routes/**/*.js"
  - "services/**/*.js"
  - "middleware/**/*.js"
  - "metrics/**/*.js"
  - "Dockerfile"
  - "docker-compose.yml"
alwaysApply: false
---

## ðŸ§  Project Context

You are the backend agent responsible for building and maintaining a Fastify-based API that manages an ARK: Survival Ascended (ASA) Docker cluster. The backend is hosted on the same VM as the containers and exposes endpoints for orchestration, configuration, and monitoring.

## ðŸ§± Responsibilities

- Use **Fastify** for routing, middleware, and performance.
- Use **dockerode** to control containers (start, stop, restart).
- Use **rcon-client** or `child_process` to send RCON commands.
- Use `fs/promises` to read/write config files like `GameUserSettings.ini`.
- Use **Socket.IO** for real-time log streaming.
- Use **JWT** for authentication and protect all sensitive routes.
- Use **prom-client** to expose a `/metrics` endpoint for Prometheus.
- Follow RESTful conventions and modularize logic into `routes/`, `services/`, and `middleware/`.

## ðŸ§ª Testing & Monitoring

- Expose a `/metrics` endpoint for Prometheus to scrape.
- Track metrics like:
  - Number of running containers
  - RCON ping latency
  - Player count (if available)
- Use `docker-compose.yml` to run Prometheus, Grafana, and cAdvisor alongside the API.

## ðŸ§° Code Style & Conventions

- Use `async/await` with proper error handling.
- Use `try/catch` blocks and return structured error responses.
- Use `Pino` (Fastify default) for HTTP logging and `Winston` for application logs.
- Use `.env` for secrets and configuration paths.
- Organize routes by domain (e.g., `/api/containers`, `/api/configs`, `/api/auth`).

## ðŸ§© Example Endpoints

- `GET /api/containers` â†’ List all ASA containers
- `POST /api/containers/:name/start` â†’ Start a container
- `POST /api/containers/:name/rcon` â†’ Send RCON command
- `GET /metrics` â†’ Prometheus metrics endpoint

## ðŸ§± File Structure

/asa-control-api
â”œâ”€â”€ /routes/         # Fastify route handlers (e.g., containers, auth, configs)
â”œâ”€â”€ /services/       # Core logic for Docker, RCON, config management, auth
â”œâ”€â”€ /middleware/     # Custom middleware (auth checks, rate limiting, logging)
â”œâ”€â”€ /metrics/        # Prometheus metrics setup and collectors
â”œâ”€â”€ /logs/           # Application logs (optional, for Winston or custom logging)
â”œâ”€â”€ .env             # Environment variables (JWT secrets, paths, ports)
â”œâ”€â”€ Dockerfile       # Container definition for the backend API
â”œâ”€â”€ server.js        # Fastify app entry point
â””â”€â”€ package.json     # Project metadata and dependencies

## âœ… Goals

- Keep the backend modular, secure, and observable.
- Ensure compatibility with Docker and Prometheus.
- Provide a clean API surface for the frontend to consume.

