# ASA API Windows Service Installer
# Installs the ASA API as a Windows service
# Compatible with PowerShell 5.1

param(
    [string]$ServiceName = "ASA-API",
    [string]$DisplayName = "ASA Management API",
    [string]$Description = "ASA Management Dashboard API Backend",
    [string]$ApiPath = "C:\ASA-API",
    [int]$Port = 4000
)

# Check if running as Administrator
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Error "This script must be run as Administrator"
    Write-Host "Please right-click PowerShell and select 'Run as Administrator'" -ForegroundColor Yellow
    exit 1
}

Write-Host "ASA API Windows Service Installer" -ForegroundColor Green
Write-Host "===================================" -ForegroundColor Green

# Check if Node.js is installed
Write-Host "Checking for Node.js..." -ForegroundColor Cyan
try {
    $nodeVersion = node --version
    Write-Host "Node.js found: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Error "Node.js is required but not found. Please install Node.js and try again."
    Write-Host "Download from: https://nodejs.org/" -ForegroundColor Yellow
    exit 1
}

# Create API directory
if (!(Test-Path $ApiPath)) {
    New-Item -ItemType Directory -Path $ApiPath -Force
    Write-Host "Created API directory: $ApiPath" -ForegroundColor Green
}

# Copy API files from current directory
Write-Host "Copying API files..." -ForegroundColor Cyan
$sourceDir = Split-Path $PSScriptRoot -Parent
$filesToCopy = @(
    "package.json",
    "package-lock.json",
    "server.js",
    "config",
    "middleware",
    "routes",
    "services",
    "utils",
    "env.example",
    ".asa-run-mode",
    ".asa-root-path"
)

foreach ($file in $filesToCopy) {
    $sourcePath = Join-Path $sourceDir $file
    $destPath = Join-Path $ApiPath $file
    
    if (Test-Path $sourcePath) {
        if (Test-Path $destPath) {
            Remove-Item $destPath -Recurse -Force
        }
        Copy-Item $sourcePath $destPath -Recurse -Force
        Write-Host "Copied: $file" -ForegroundColor Gray
    } else {
        Write-Host "Warning: $file not found in source" -ForegroundColor Yellow
    }
}

# Create service script
$serviceScriptPath = Join-Path $ApiPath "asa-api-service.ps1"

# Build the service script content with proper environment variables
$serviceScriptContent = @"
# ASA API Windows Service
# This file is auto-generated by the installer

param(
    [string]`$ApiPath = "$ApiPath",
    [int]`$Port = $Port,
    [string]`$LogPath = "$ApiPath\logs",
    [string]`$NodeExe = "node.exe"
)

# Create directories if they don't exist
if (!(Test-Path `$ApiPath)) { New-Item -ItemType Directory -Path `$ApiPath -Force }
if (!(Test-Path `$LogPath)) { New-Item -ItemType Directory -Path `$LogPath -Force }

# Logging function
function Write-Log {
    param([string]`$Message, [string]`$Level = "INFO")
    `$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    `$logMessage = "[`$timestamp] [`$Level] `$Message"
    Write-Host `$logMessage
    Add-Content -Path "`$LogPath\asa-api-service.log" -Value `$logMessage
}

# Check if Node.js is installed
function Test-NodeJS {
    try {
        `$nodeVersion = & `$NodeExe --version 2>`$null
        if (`$LASTEXITCODE -eq 0) {
            Write-Log "Node.js found: `$nodeVersion"
            return `$true
        }
    }
    catch {
        Write-Log "Node.js not found in PATH" "ERROR"
        return `$false
    }
    return `$false
}

# Start the API server
function Start-APIServer {
    try {
        Write-Log "Starting ASA API server on port `$Port"
        
        # Change to API directory
        Set-Location `$ApiPath
        
        # Check if package.json exists
        if (!(Test-Path "package.json")) {
            Write-Log "package.json not found in `$ApiPath" "ERROR"
            return `$false
        }
        
        # Install dependencies if node_modules doesn't exist
        if (!(Test-Path "node_modules")) {
            Write-Log "Installing dependencies..."
            & npm install
            if (`$LASTEXITCODE -ne 0) {
                Write-Log "Failed to install dependencies" "ERROR"
                return `$false
            }
        }
        
        # Set comprehensive environment variables to match working version
        `$env:NODE_ENV = "production"
        `$env:PORT = `$Port
        `$env:HOST = "0.0.0.0"
        `$env:SERVER_MODE = "native"
        `$env:NATIVE_BASE_PATH = "G:\ARK"
        `$env:JWT_SECRET = "fallback-secret-change-in-production"
        `$env:JWT_EXPIRES_IN = "24h"
        `$env:CORS_ORIGIN = "http://localhost:3000,http://localhost:5173,http://localhost:4000,http://localhost:4010"
        `$env:DOCKER_ENABLED = "false"
        `$env:RATE_LIMIT_MAX = "100"
        `$env:RATE_LIMIT_TIME_WINDOW = "900000"
        `$env:LOG_LEVEL = "info"
        `$env:LOG_FILE_PATH = "`$LogPath\app.log"
        `$env:METRICS_ENABLED = "true"
        `$env:RCON_DEFAULT_PORT = "32330"
        `$env:RCON_PASSWORD = "admin"
        `$env:ASA_CONFIG_SUB_PATH = "Config/WindowsServer"
        `$env:AUTO_INSTALL_STEAMCMD = "true"
        
        # Start the server
        Write-Log "Starting server with: `$NodeExe server.js"
        & `$NodeExe server.js
        
        if (`$LASTEXITCODE -ne 0) {
            Write-Log "Server exited with code `$LASTEXITCODE" "ERROR"
            return `$false
        }
        
        return `$true
    }
    catch {
        Write-Log "Error starting API server: `$(`$_.Exception.Message)" "ERROR"
        return `$false
    }
}

# Main service loop
function Start-Service {
    Write-Log "ASA API Service starting..."
    
    # Check Node.js
    if (!(Test-NodeJS)) {
        Write-Log "Node.js is required but not found. Please install Node.js and try again." "ERROR"
        return
    }
    
    # Create comprehensive environment file if it doesn't exist
    `$envFile = Join-Path `$ApiPath ".env"
    if (!(Test-Path `$envFile)) {
        `$envContent = "NODE_ENV=production`nPORT=`$Port`nHOST=0.0.0.0`nSERVER_MODE=native`nNATIVE_BASE_PATH=G:\ARK`nJWT_SECRET=fallback-secret-change-in-production`nJWT_EXPIRES_IN=24h`nCORS_ORIGIN=http://localhost:3000,http://localhost:5173,http://localhost:4000,http://localhost:4010`nDOCKER_ENABLED=false`nRATE_LIMIT_MAX=100`nRATE_LIMIT_TIME_WINDOW=900000`nLOG_LEVEL=info`nLOG_FILE_PATH=`$LogPath\app.log`nMETRICS_ENABLED=true`nRCON_DEFAULT_PORT=32330`nRCON_PASSWORD=admin`nASA_CONFIG_SUB_PATH=Config/WindowsServer`nAUTO_INSTALL_STEAMCMD=true"
        `$envContent | Set-Content `$envFile
        Write-Log "Created comprehensive environment file: `$envFile"
    }
    
    # Service loop with restart capability
    `$restartCount = 0
    `$maxRestarts = 5
    `$restartDelay = 30
    
    while (`$true) {
        try {
            Write-Log "Starting API server (attempt `$(`$restartCount + 1))"
            `$success = Start-APIServer
            
            if (`$success) {
                Write-Log "API server stopped normally"
                break
            } else {
                `$restartCount++
                if (`$restartCount -ge `$maxRestarts) {
                    Write-Log "Maximum restart attempts reached. Service will stop." "ERROR"
                    break
                }
                
                Write-Log "API server failed. Restarting in `$restartDelay seconds... (attempt `$restartCount of `$maxRestarts)"
                Start-Sleep -Seconds `$restartDelay
            }
        }
        catch {
            Write-Log "Service error: `$(`$_.Exception.Message)" "ERROR"
            `$restartCount++
            
            if (`$restartCount -ge `$maxRestarts) {
                Write-Log "Maximum restart attempts reached due to errors. Service will stop." "ERROR"
                break
            }
            
            Write-Log "Restarting in `$restartDelay seconds... (attempt `$restartCount of `$maxRestarts)"
            Start-Sleep -Seconds `$restartDelay
        }
    }
    
    Write-Log "ASA API Service stopped"
}

# Start the service
Start-Service
"@

$serviceScriptContent | Set-Content $serviceScriptPath
Write-Host "Created service script: $serviceScriptPath" -ForegroundColor Green

# Check if service already exists
$existingService = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue
if ($existingService) {
    Write-Host "Service $ServiceName already exists. Stopping and removing..." -ForegroundColor Yellow
    Stop-Service $ServiceName -Force -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 2
    # Use sc.exe for PowerShell 5.1 compatibility
    $result = sc.exe delete $ServiceName
    if ($LASTEXITCODE -ne 0) {
        Write-Host "Warning: Service removal result: $result" -ForegroundColor Yellow
    }
    Start-Sleep -Seconds 2
}

# Create the service
$serviceArgs = @{
    Name = $ServiceName
    DisplayName = $DisplayName
    Description = $Description
    StartupType = "Automatic"
    BinaryPathName = "powershell.exe -ExecutionPolicy Bypass -File `"$serviceScriptPath`""
}

try {
    New-Service @serviceArgs
    Write-Host "Service created successfully!" -ForegroundColor Green
    
    # Set service to run as Local System
    $service = Get-WmiObject -Class Win32_Service -Filter "Name='$ServiceName'"
    $service.Change($null, $null, $null, $null, $null, $null, $null, "LocalSystem", $null, $null, $null)
    
    Write-Host "Service configured to run as Local System" -ForegroundColor Green
    
    # Start the service
    Start-Service $ServiceName
    Write-Host "Service started successfully!" -ForegroundColor Green
    
    # Show service status
    $service = Get-Service $ServiceName
    Write-Host "Service Status: $($service.Status)" -ForegroundColor Cyan
    Write-Host "Service will start automatically on boot" -ForegroundColor Cyan
    
    Write-Host "`nInstallation completed successfully!" -ForegroundColor Green
    Write-Host "The ASA API is now running as a Windows service." -ForegroundColor Green
    Write-Host "Service Name: $ServiceName" -ForegroundColor Cyan
    Write-Host "API Endpoint: http://localhost:$Port" -ForegroundColor Cyan
    Write-Host "API Directory: $ApiPath" -ForegroundColor Cyan
    Write-Host "Logs: $ApiPath\logs\asa-api-service.log" -ForegroundColor Cyan
    
    Write-Host "`nEnvironment Configuration:" -ForegroundColor Yellow
    Write-Host "  CORS Origins: http://localhost:3000, http://localhost:5173, http://localhost:4000, http://localhost:4010" -ForegroundColor Cyan
    Write-Host "  Server Mode: native" -ForegroundColor Cyan
    Write-Host "  Base Path: G:\ARK" -ForegroundColor Cyan
    Write-Host "  JWT Secret: fallback-secret-change-in-production" -ForegroundColor Cyan
    
    Write-Host "`nNext steps:" -ForegroundColor Yellow
    Write-Host "1. Update your frontend to point to: http://localhost:$Port" -ForegroundColor Cyan
    Write-Host "2. Test the API: curl http://localhost:$Port/health" -ForegroundColor Cyan
    Write-Host "3. Keep the monitoring containers running for Prometheus/Grafana" -ForegroundColor Cyan
    
    Write-Host "`nUseful commands:" -ForegroundColor Yellow
    Write-Host "  Get-Service $ServiceName                    # Check service status" -ForegroundColor Gray
    Write-Host "  Start-Service $ServiceName                  # Start the service" -ForegroundColor Gray
    Write-Host "  Stop-Service $ServiceName                   # Stop the service" -ForegroundColor Gray
    Write-Host "  Restart-Service $ServiceName                # Restart the service" -ForegroundColor Gray
    Write-Host "  sc.exe delete $ServiceName                  # Uninstall the service" -ForegroundColor Gray
    
} catch {
    Write-Error "Failed to create service: $($_.Exception.Message)"
    exit 1
} 
 